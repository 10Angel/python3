diff -urN Python-3.0a1.org/Modules/dbmmodule.c Python-3.0a1/Modules/dbmmodule.c
--- Python-3.0a1.org/Modules/dbmmodule.c	2007-08-14 18:29:22.000000000 +0200
+++ Python-3.0a1/Modules/dbmmodule.c	2007-09-02 20:09:52.356906353 +0200
@@ -11,22 +11,12 @@
 /* Some Linux systems install gdbm/ndbm.h, but not ndbm.h.  This supports
  * whichever configure was able to locate.
  */
-#if defined(HAVE_NDBM_H)
 #include <ndbm.h>
 #if defined(PYOS_OS2) && !defined(PYCC_GCC)
 static char *which_dbm = "ndbm";
 #else
 static char *which_dbm = "GNU gdbm";  /* EMX port of GDBM */
 #endif
-#elif defined(HAVE_GDBM_NDBM_H)
-#include <gdbm/ndbm.h>
-static char *which_dbm = "GNU gdbm";
-#elif defined(HAVE_BERKDB_H)
-#include <db.h>
-static char *which_dbm = "Berkeley DB";
-#else
-#error "No ndbm.h available!"
-#endif
 
 typedef struct {
 	PyObject_HEAD
diff -urN Python-3.0a1.org/setup.py Python-3.0a1/setup.py
--- Python-3.0a1.org/setup.py	2007-08-29 00:24:48.000000000 +0200
+++ Python-3.0a1/setup.py	2007-09-02 20:09:34.579833964 +0200
@@ -869,30 +869,8 @@
 
         # The standard Unix dbm module:
         if platform not in ['cygwin']:
-            if find_file("ndbm.h", inc_dirs, []) is not None:
-                # Some systems have -lndbm, others don't
-                if self.compiler.find_library_file(lib_dirs, 'ndbm'):
-                    ndbm_libs = ['ndbm']
-                else:
-                    ndbm_libs = []
-                exts.append( Extension('dbm', ['dbmmodule.c'],
-                                       define_macros=[('HAVE_NDBM_H',None)],
-                                       libraries = ndbm_libs ) )
-            elif (self.compiler.find_library_file(lib_dirs, 'gdbm')
-                  and find_file("gdbm/ndbm.h", inc_dirs, []) is not None):
-                exts.append( Extension('dbm', ['dbmmodule.c'],
-                                       define_macros=[('HAVE_GDBM_NDBM_H',None)],
-                                       libraries = ['gdbm'] ) )
-            elif db_incs is not None:
-                exts.append( Extension('dbm', ['dbmmodule.c'],
-                                       library_dirs=dblib_dir,
-                                       runtime_library_dirs=dblib_dir,
-                                       include_dirs=db_incs,
-                                       define_macros=[('HAVE_BERKDB_H',None),
-                                                      ('DB_DBM_HSEARCH',None)],
-                                       libraries=dblibs))
-            else:
-                missing.append('dbm')
+            exts.append( Extension('dbm', ['dbmmodule.c'],
+                                   libraries = ['gdbm', 'gdbm_compat'] ) )
 
         # Anthony Baxter's gdbm module.  GNU dbm(3) will require -lgdbm:
         if (self.compiler.find_library_file(lib_dirs, 'gdbm')):
