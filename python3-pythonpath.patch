--- Python-3.0.1/Modules/getpath.c.wiget	2009-02-12 16:56:48.000000000 +0100
+++ Python-3.0.1/Modules/getpath.c	2009-03-14 18:12:32.000000000 +0100
@@ -481,7 +481,7 @@ calculate_path(void)
       * "#!/opt/python2.3/bin/python", the kernel only passes "python"
       * as argv[0], which falls through to the $PATH search below.
       * If /opt/python2.3/bin isn't in your path, or is near the end,
-      * this algorithm may incorrectly find /usr/bin/python. To work
+      * this algorithm may incorrectly find /usr/bin/python3. To work
       * around this, we can use _NSGetExecutablePath to get a better
       * hint of what the intended interpreter was, although this
       * will fail if a relative path was used. but in that case,
--- Python-3.0.1/Lib/distutils/tests/test_build_scripts.py.wiget	2004-08-26 07:44:02.000000000 +0200
+++ Python-3.0.1/Lib/distutils/tests/test_build_scripts.py	2009-03-14 18:12:32.000000000 +0100
@@ -58,7 +58,7 @@ class BuildScriptsTestCase(support.Tempd
                            "pass\n"))
         expected.append("script2.py")
         self.write_script(dir, "script2.py",
-                          ("#!/usr/bin/python\n"
+                          ("#!/usr/bin/python3\n"
                            "# bogus script w/ Python sh-bang\n"
                            "pass\n"))
         expected.append("shell.sh")
--- Python-3.0.1/Lib/distutils/tests/test_install_scripts.py.wiget	2004-08-03 20:53:07.000000000 +0200
+++ Python-3.0.1/Lib/distutils/tests/test_install_scripts.py	2009-03-14 18:12:32.000000000 +0100
@@ -48,7 +48,7 @@ class InstallScriptsTestCase(support.Tem
         write_script("script1.py", ("#! /usr/bin/env python2.3\n"
                                     "# bogus script w/ Python sh-bang\n"
                                     "pass\n"))
-        write_script("script2.py", ("#!/usr/bin/python\n"
+        write_script("script2.py", ("#!/usr/bin/python3\n"
                                     "# bogus script w/ Python sh-bang\n"
                                     "pass\n"))
         write_script("shell.sh", ("#!/bin/sh\n"
--- Python-3.0.1/Lib/test/test_optparse.py.wiget	2008-05-20 23:35:26.000000000 +0200
+++ Python-3.0.1/Lib/test/test_optparse.py	2009-03-14 18:12:32.000000000 +0100
@@ -1,4 +1,4 @@
-#!/usr/bin/python
+#!/usr/bin/python3
 
 #
 # Test suite for Optik.  Supplied by Johannes Gijsbers
--- Python-3.0.1/Lib/test/test_bz2.py.wiget	2008-07-16 05:43:04.000000000 +0200
+++ Python-3.0.1/Lib/test/test_bz2.py	2009-03-14 18:12:32.000000000 +0100
@@ -1,4 +1,4 @@
-#!/usr/bin/python
+#!/usr/bin/python3
 from test import support
 from test.support import TESTFN
 
--- Python-3.0.1/Lib/cgi.py.wiget	2008-12-04 21:11:57.000000000 +0100
+++ Python-3.0.1/Lib/cgi.py	2009-03-14 18:12:32.000000000 +0100
@@ -1,6 +1,6 @@
-#! /usr/local/bin/python
+#! /usr/bin/python3
 
-# NOTE: the above "/usr/local/bin/python" is NOT a mistake.  It is
+# NOTE: the above "/usr/bin/python3" is NOT a mistake.  It is
 # intentionally NOT "/usr/bin/env python".  On many systems
 # (e.g. Solaris), /usr/local/bin is not in $PATH as passed to CGI
 # scripts, and /usr/local/bin is the default directory where Python is
--- Python-3.0.1/Demo/cgi/cgi2.py.wiget	2007-08-06 23:07:53.000000000 +0200
+++ Python-3.0.1/Demo/cgi/cgi2.py	2009-03-14 18:12:32.000000000 +0100
@@ -1,4 +1,4 @@
-#!/usr/local/bin/python
+#!/usr/bin/python3
 
 """CGI test 2 - basic use of cgi module."""
 
--- Python-3.0.1/Demo/cgi/cgi1.py.wiget	2007-07-17 22:59:35.000000000 +0200
+++ Python-3.0.1/Demo/cgi/cgi1.py	2009-03-14 18:12:32.000000000 +0100
@@ -1,4 +1,4 @@
-#!/usr/local/bin/python
+#!/usr/bin/python3
 
 """CGI test 1 - check server setup."""
 
--- Python-3.0.1/Demo/cgi/cgi3.py.wiget	2002-10-17 17:53:02.000000000 +0200
+++ Python-3.0.1/Demo/cgi/cgi3.py	2009-03-14 18:12:32.000000000 +0100
@@ -1,4 +1,4 @@
-#!/usr/local/bin/python
+#!/usr/bin/python3
 
 """CGI test 3 (persistent data)."""
 
--- Python-3.0.1/Demo/tix/INSTALL.txt.wiget	2001-11-11 15:07:37.000000000 +0100
+++ Python-3.0.1/Demo/tix/INSTALL.txt	2009-03-14 18:12:32.000000000 +0100
@@ -71,7 +71,7 @@ _tkinter _tkinter.c tkappinit.c -DWITH_A
 You should now have a working Tix implementation in Python. To see if all
 is as it should be, run the 'tixwidgets.py' script in the Demo/tix directory.
 Under X windows, do
-	/usr/local/bin/python Demo/tix/tixwidgets.py
+	/usr/bin/python3 Demo/tix/tixwidgets.py
 
 If this does not work, you may need to tell python where to find
 the Tcl, Tk and Tix library files. This is done by setting the
@@ -80,7 +80,7 @@ TCL_LIBRARY, TK_LIBRARY and TIX_LIBRARY 
 	env 	TCL_LIBRARY=/usr/local/lib/tcl8.3 \
 		TK_LIBRARY=/usr/local/lib/tk8.3 \
 		TIX_LIBRARY=/usr/local/lib/tix8.1 \
-		/usr/local/bin/python Demo/tix/tixwidgets.py
+		/usr/bin/python3 Demo/tix/tixwidgets.py
 
 
 If you find any bugs or have suggestions for improvement, please report them
--- Python-3.0.1/Tools/faqwiz/faqw.py.wiget	2008-02-23 19:30:17.000000000 +0100
+++ Python-3.0.1/Tools/faqwiz/faqw.py	2009-03-14 18:12:32.000000000 +0100
@@ -1,4 +1,4 @@
-#! /usr/local/bin/python
+#! /usr/bin/python3
 
 """FAQ wizard bootstrap."""
 
@@ -10,7 +10,7 @@
 # executable.
 
 # You need to edit the first line and the lines that define FAQDIR and
-# SRCDIR, below: change /usr/local/bin/python to where your Python
+# SRCDIR, below: change /usr/bin/python3 to where your Python
 # interpreter lives, change the value for FAQDIR to where your FAQ
 # lives, and change the value for SRCDIR to where your faqwiz.py
 # module lives.  The faqconf.py and faqcust.py files live there, too.
--- Python-3.0.1/Tools/pybench/README.wiget	2009-02-07 18:28:46.000000000 +0100
+++ Python-3.0.1/Tools/pybench/README	2009-03-14 18:12:32.000000000 +0100
@@ -142,7 +142,7 @@ Benchmark: 2006-06-12 12:09:25
 
     Python:
        Implementation: CPython
-       Executable:   /usr/local/bin/python
+       Executable:   /usr/bin/python3
        Version:      3.0
        Compiler:     GCC 3.3.4 (pre 3.3.5 20040809)
        Bits:         64bit
--- Python-3.0.1/Tools/pybench/pybench.py.wiget	2009-02-07 18:28:46.000000000 +0100
+++ Python-3.0.1/Tools/pybench/pybench.py	2009-03-14 18:12:32.000000000 +0100
@@ -1,4 +1,4 @@
-#!/usr/local/bin/python -O
+#!/usr/bin/python3 -O
 
 """ A Python Benchmark Suite
 
--- Python-3.0.1/Tools/scripts/README.wiget	2007-10-13 20:56:00.000000000 +0200
+++ Python-3.0.1/Tools/scripts/README	2009-03-14 18:12:32.000000000 +0100
@@ -44,7 +44,7 @@ ndiff.py		Intelligent diff between text 
 nm2def.py		Create a template for PC/python_nt.def (Marc Lemburg)
 objgraph.py		Print object graph from nm output on a library
 parseentities.py	Utility for parsing HTML entity definitions
-pathfix.py		Change #!/usr/local/bin/python into something else
+pathfix.py		Change #!/usr/bin/python3 into something else
 pdeps.py		Print dependencies between Python modules
 pickle2db.py		Load a pickle generated by db2pickle.py to a database
 pindent.py		Indent Python code, giving block-closing comments
--- Python-3.0.1/Tools/scripts/parseentities.py.wiget	2008-05-16 17:23:30.000000000 +0200
+++ Python-3.0.1/Tools/scripts/parseentities.py	2009-03-14 18:12:32.000000000 +0100
@@ -1,4 +1,4 @@
-#!/usr/local/bin/python
+#!/usr/bin/python3
 """ Utility for parsing HTML entity definitions available from:
 
       http://www.w3.org/ as e.g.
--- Python-3.0.1/Tools/scripts/fixps.py.wiget	2007-08-03 19:06:41.000000000 +0200
+++ Python-3.0.1/Tools/scripts/fixps.py	2009-03-14 18:12:32.000000000 +0100
@@ -15,13 +15,13 @@ def main():
             print(filename, ': can\'t open :', msg)
             continue
         line = f.readline()
-        if not re.match('^#! */usr/local/bin/python', line):
-            print(filename, ': not a /usr/local/bin/python script')
+        if not re.match('^#! */usr/bin/python3', line):
+            print(filename, ': not a /usr/bin/python3 script')
             f.close()
             continue
         rest = f.read()
         f.close()
-        line = re.sub('/usr/local/bin/python',
+        line = re.sub('/usr/bin/python3',
                       '/usr/bin/env python', line)
         print(filename, ':', repr(line))
         f = open(filename, "w")
--- Python-3.0.1/Doc/install/index.rst.wiget	2009-01-04 01:09:41.000000000 +0100
+++ Python-3.0.1/Doc/install/index.rst	2009-03-14 18:12:32.000000000 +0100
@@ -362,16 +362,16 @@ However, if you are installing Python mo
 them to go in :file:`/usr/local/lib/python2.{X}` rather than
 :file:`/usr/lib/python2.{X}`.  This can be done with ::
 
-   /usr/bin/python setup.py install --prefix=/usr/local
+   /usr/bin/python3 setup.py install --prefix=/usr/local
 
 Another possibility is a network filesystem where the name used to write to a
 remote directory is different from the name used to read it: for example, the
-Python interpreter accessed as :file:`/usr/local/bin/python` might search for
+Python interpreter accessed as :file:`/usr/bin/python3` might search for
 modules in :file:`/usr/local/lib/python2.{X}`, but those modules would have to
 be installed to, say, :file:`/mnt/{@server}/export/lib/python2.{X}`.  This could
 be done with ::
 
-   /usr/local/bin/python setup.py install --prefix=/mnt/@server/export
+   /usr/bin/python3 setup.py install --prefix=/mnt/@server/export
 
 In either case, the :option:`--prefix` option defines the installation base, and
 the :option:`--exec-prefix` option defines the platform-specific installation
--- Python-3.0.1/Doc/README.txt.wiget	2009-02-13 00:46:00.000000000 +0100
+++ Python-3.0.1/Doc/README.txt	2009-03-14 18:12:32.000000000 +0100
@@ -37,7 +37,7 @@ the top-level index `build/html/index.ht
 To use a Python interpreter that's not called ``python``, use the standard
 way to set Makefile variables, using e.g. ::
 
-   make html PYTHON=/usr/bin/python2.5
+   make html PYTHON=/usr/bin/python3
 
 Available make targets are:
 
--- Python-3.0.1/Doc/tutorial/interpreter.rst.wiget	2009-01-04 01:04:26.000000000 +0100
+++ Python-3.0.1/Doc/tutorial/interpreter.rst	2009-03-14 18:13:35.000000000 +0100
@@ -10,11 +10,11 @@ Using the Python Interpreter
 Invoking the Interpreter
 ========================
 
-The Python interpreter is usually installed as :file:`/usr/local/bin/python3.0`
+The Python interpreter is usually installed as :file:`/usr/local/bin/python3`
 on those machines where it is available; putting :file:`/usr/local/bin` in your
 Unix shell's search path makes it possible to start it by typing the command ::
 
-   python3.0
+   python3
 
 to the shell. [#]_ Since the choice of the directory where the interpreter lives
 is an installation option, other places are possible; check with your local
--- Python-3.0.1/Doc/c-api/init.rst.wiget	2009-02-06 03:50:18.000000000 +0100
+++ Python-3.0.1/Doc/c-api/init.rst	2009-03-14 18:12:32.000000000 +0100
@@ -194,7 +194,7 @@ Initialization, Finalization, and Thread
    Return the *prefix* for installed platform-independent files. This is derived
    through a number of complicated rules from the program name set with
    :cfunc:`Py_SetProgramName` and some environment variables; for example, if the
-   program name is ``'/usr/local/bin/python'``, the prefix is ``'/usr/local'``. The
+   program name is ``'/usr/bin/python3'``, the prefix is ``'/usr/local'``. The
    returned string points into static storage; the caller should not modify its
    value.  This corresponds to the :makevar:`prefix` variable in the top-level
    :file:`Makefile` and the :option:`--prefix` argument to the :program:`configure`
@@ -207,7 +207,7 @@ Initialization, Finalization, and Thread
    Return the *exec-prefix* for installed platform-*dependent* files.  This is
    derived through a number of complicated rules from the program name set with
    :cfunc:`Py_SetProgramName` and some environment variables; for example, if the
-   program name is ``'/usr/local/bin/python'``, the exec-prefix is
+   program name is ``'/usr/bin/python3'``, the exec-prefix is
    ``'/usr/local'``.  The returned string points into static storage; the caller
    should not modify its value.  This corresponds to the :makevar:`exec_prefix`
    variable in the top-level :file:`Makefile` and the :option:`--exec-prefix`
--- Python-3.0.1/Doc/c-api/intro.rst.wiget	2009-01-17 19:00:58.000000000 +0100
+++ Python-3.0.1/Doc/c-api/intro.rst	2009-03-14 18:12:32.000000000 +0100
@@ -536,7 +536,7 @@ where the executable named :file:`python
 path (the environment variable :envvar:`PATH`).
 
 For instance, if the Python executable is found in
-:file:`/usr/local/bin/python`, it will assume that the libraries are in
+:file:`/usr/bin/python3`, it will assume that the libraries are in
 :file:`/usr/local/lib/python{X.Y}`.  (In fact, this particular path is also
 the "fallback" location, used when no executable file named :file:`python` is
 found along :envvar:`PATH`.)  The user can override this behavior by setting the
--- Python-3.0.1/Doc/library/cgi.rst.wiget	2008-09-04 00:49:01.000000000 +0200
+++ Python-3.0.1/Doc/library/cgi.rst	2009-03-14 18:12:32.000000000 +0100
@@ -360,7 +360,7 @@ mode should be ``0o755`` octal (use ``ch
 first line of the script contains ``#!`` starting in column 1 followed by the
 pathname of the Python interpreter, for instance::
 
-   #!/usr/local/bin/python
+   #!/usr/bin/python3
 
 Make sure the Python interpreter exists and is executable by "others".
 
--- Python-3.0.1/PC/os2vacpp/readme.txt.wiget	2006-03-01 07:28:58.000000000 +0100
+++ Python-3.0.1/PC/os2vacpp/readme.txt	2009-03-14 18:12:32.000000000 +0100
@@ -78,7 +78,7 @@ A few new attributes have been added to 
 -- Using Python as the Default OS/2 Batch Language
 
 Note that OS/2 supports the Unix technique of putting the special
-comment line at the time of scripts e.g. "#!/usr/bin/python" in
+comment line at the time of scripts e.g. "#!/usr/bin/python3" in
 a different syntactic form.  To do this, put your script into a file
 with a .CMD extension and added 'extproc' to the top as follows:
 
--- Python-3.0.1/Misc/HISTORY.wiget	2008-02-22 17:37:40.000000000 +0100
+++ Python-3.0.1/Misc/HISTORY	2009-03-14 18:12:32.000000000 +0100
@@ -13231,9 +13231,9 @@ but not in sys.argv[0], so you can still
 were invoked.
 
 - It is now recommended to use ``#!/usr/bin/env python'' instead of
-``#!/usr/local/bin/python'' at the start of executable scripts, except
+``#!/usr/bin/python3'' at the start of executable scripts, except
 for CGI scripts.  It has been determined that the use of /usr/bin/env
-is more portable than that of /usr/local/bin/python -- scripts almost
+is more portable than that of /usr/bin/python3 -- scripts almost
 never have to be edited when the Python interpreter lives in a
 non-standard place.  Note that this doesn't work for CGI scripts since
 the python executable often doesn't live in the HTTP server's default
@@ -16518,7 +16518,7 @@ assign a function object to sys.exitfunc
 Python exits or receives a SIGTERM or SIGHUP signal.
 
 The interpreter is now generally assumed to live in
-/usr/local/bin/python (as opposed to /usr/local/python).  The script
+/usr/bin/python3 (as opposed to /usr/local/python).  The script
 demo/scripts/fixps.py will update old scripts in place (you can easily
 modify it to do other similar changes).
 
